{"ast":null,"code":"import mockData from './mock-data';\n\n/**\r\n * \r\n * @param {*} events:\r\n * The following function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\n\nexport const extractLocations = events => {\n  const extractedLocations = events.map(event => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\n// Getting the Access Token\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  // Outcome 1. No accessToken found in localstorage\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch(\"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url\");\n      const result = await response.json();\n      const {\n        authUrl\n      } = result;\n      return window.location.href = authUrl;\n    }\n    return code && getAccessToken(code);\n  }\n  return accessToken;\n};\n\n// Outcome 2. Access Token Found in localstorage\nconst checkToken = async accessToken => {\n  const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);\n  const result = await response.json();\n  return result;\n};\n\n// Get new token if it does not exist or invalid\nconst getToken = async code => {\n  const encodeCode = encodeURIComponent(code);\n  const response = await fetch('https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/token' + '/' + encodeCode);\n  const {\n    access_token\n  } = await response.json();\n  access_token && localStorage.setItem(\"access_token\", access_token);\n  return access_token;\n};\n\n// Simplify URL to user\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n/**\r\n * \r\n * This function will fetch the list of all events\r\n */\n\nexport const getEvents = async () => {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockData;\n  }\n  const token = await getAccessToken();\n  if (token) {\n    removeQuery();\n    const url = \"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      return result.events;\n    } else return null;\n  }\n};","map":{"version":3,"names":["mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","getAccessToken","accessToken","localStorage","getItem","tokenCheck","checkToken","error","removeItem","searchParams","URLSearchParams","window","search","code","get","response","fetch","result","json","authUrl","href","getToken","encodeCode","encodeURIComponent","access_token","setItem","removeQuery","newurl","history","pushState","pathname","protocol","host","getEvents","startsWith","token","url"],"sources":["C:/Users/heyra/OneDrive/Documents/meet/src/api.js"],"sourcesContent":["import mockData from './mock-data';\r\n\r\n/**\r\n * \r\n * @param {*} events:\r\n * The following function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\n\r\nexport const extractLocations = (events) => {\r\n    const extractedLocations = events.map((event) => event.location);\r\n    const locations = [...new Set(extractedLocations)];\r\n    return locations;\r\n};\r\n\r\n// Getting the Access Token\r\nexport const getAccessToken = async () => {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    // Outcome 1. No accessToken found in localstorage\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || tokenCheck.error) {\r\n        await localStorage.removeItem(\"access_token\");\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get(\"code\");\r\n        if (!code) {\r\n            const response = await fetch(\r\n                \"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url\"\r\n            );\r\n            const result = await response.json();\r\n            const { authUrl } = result;\r\n            return (window.location.href = authUrl);\r\n        }\r\n        return code && getAccessToken(code);\r\n    }\r\n    return accessToken\r\n};\r\n\r\n// Outcome 2. Access Token Found in localstorage\r\nconst checkToken = async (accessToken) => {\r\n    const response = await fetch(\r\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n};\r\n\r\n// Get new token if it does not exist or invalid\r\nconst getToken = async (code) => {\r\n    const encodeCode = encodeURIComponent(code);\r\n    const response = await fetch(\r\n        'https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/token' + '/' + encodeCode\r\n    );\r\n    const { access_token } = await response.json();\r\n    access_token && localStorage.setItem(\"access_token\", access_token);\r\n\r\n    return access_token;\r\n};\r\n\r\n// Simplify URL to user\r\nconst removeQuery = () => {\r\n    let newurl;\r\n    if (window.history.pushState && window.location.pathname) {\r\n        newurl = \r\n        window.location.protocol +\r\n        \"//\" +\r\n        window.location.host +\r\n        window.location.pathname;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    } else {\r\n        newurl = window.location.protocol + \"//\" + window.location.host;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    }\r\n};\r\n\r\n/**\r\n * \r\n * This function will fetch the list of all events\r\n */\r\n\r\nexport const getEvents = async () => {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        return mockData;\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n        removeQuery(); \r\n        const url = \"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\r\n        const response = await fetch(url);\r\n        const result = await response.json();\r\n        if (result) {\r\n            return result.events;\r\n        } else return null;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}