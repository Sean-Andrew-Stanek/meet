{"ast":null,"code":"import mockData from'./mock-data';/**\r\n * \r\n * @param {*} events:\r\n * The following function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */export const extractLocations=events=>{const extractedLocations=events.map(event=>event.location);const locations=[...new Set(extractedLocations)];return locations;};// Getting the Access Token\nexport const getAccessToken=async()=>{const accessToken=localStorage.getItem('access_token');// Outcome 1. No accessToken found in localstorage\nconst tokenCheck=accessToken&&(await checkToken(accessToken));if(!accessToken||tokenCheck.error){await localStorage.removeItem(\"access_token\");const searchParams=new URLSearchParams(window.location.search);const code=await searchParams.get(\"code\");if(!code){const response=await fetch(\"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url\");const result=await response.json();const{authUrl}=result;return window.location.href=authUrl;}return code&&getAccessToken(code);}return accessToken;};// Outcome 2. Access Token Found in localstorage\nconst checkToken=async accessToken=>{const response=await fetch(\"https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=\".concat(accessToken));const result=await response.json();return result;};// Get new token if it does not exist or invalid\nconst getToken=async code=>{const encodeCode=encodeURIComponent(code);const response=await fetch('https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/token'+'/'+encodeCode);const{access_token}=await response.json();access_token&&localStorage.setItem(\"access_token\",access_token);return access_token;};// Simplify URL to user\nconst removeQuery=()=>{let newurl;if(window.history.pushState&&window.location.pathname){newurl=window.location.protocol+\"//\"+window.location.host+window.location.pathname;window.history.pushState(\"\",\"\",newurl);}else{newurl=window.location.protocol+\"//\"+window.location.host;window.history.pushState(\"\",\"\",newurl);}};/**\r\n * \r\n * This function will fetch the list of all events\r\n */export const getEvents=async()=>{if(window.location.href.startsWith('http://localhost')){return mockData;}const token=await getAccessToken();if(token){removeQuery();const url=\"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-events\"+\"/\"+token;const response=await fetch(url);const result=await response.json();if(result){return result.events;}else return null;}};","map":{"version":3,"names":["mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","getAccessToken","accessToken","localStorage","getItem","tokenCheck","checkToken","error","removeItem","searchParams","URLSearchParams","window","search","code","get","response","fetch","result","json","authUrl","href","concat","getToken","encodeCode","encodeURIComponent","access_token","setItem","removeQuery","newurl","history","pushState","pathname","protocol","host","getEvents","startsWith","token","url"],"sources":["C:/Users/heyra/OneDrive/Documents/meet/src/api.js"],"sourcesContent":["import mockData from './mock-data';\r\n\r\n/**\r\n * \r\n * @param {*} events:\r\n * The following function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\n\r\nexport const extractLocations = (events) => {\r\n    const extractedLocations = events.map((event) => event.location);\r\n    const locations = [...new Set(extractedLocations)];\r\n    return locations;\r\n};\r\n\r\n// Getting the Access Token\r\nexport const getAccessToken = async () => {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    // Outcome 1. No accessToken found in localstorage\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || tokenCheck.error) {\r\n        await localStorage.removeItem(\"access_token\");\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get(\"code\");\r\n        if (!code) {\r\n            const response = await fetch(\r\n                \"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url\"\r\n            );\r\n            const result = await response.json();\r\n            const { authUrl } = result;\r\n            return (window.location.href = authUrl);\r\n        }\r\n        return code && getAccessToken(code);\r\n    }\r\n    return accessToken\r\n};\r\n\r\n// Outcome 2. Access Token Found in localstorage\r\nconst checkToken = async (accessToken) => {\r\n    const response = await fetch(\r\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n};\r\n\r\n// Get new token if it does not exist or invalid\r\nconst getToken = async (code) => {\r\n    const encodeCode = encodeURIComponent(code);\r\n    const response = await fetch(\r\n        'https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/token' + '/' + encodeCode\r\n    );\r\n    const { access_token } = await response.json();\r\n    access_token && localStorage.setItem(\"access_token\", access_token);\r\n\r\n    return access_token;\r\n};\r\n\r\n// Simplify URL to user\r\nconst removeQuery = () => {\r\n    let newurl;\r\n    if (window.history.pushState && window.location.pathname) {\r\n        newurl = \r\n        window.location.protocol +\r\n        \"//\" +\r\n        window.location.host +\r\n        window.location.pathname;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    } else {\r\n        newurl = window.location.protocol + \"//\" + window.location.host;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    }\r\n};\r\n\r\n/**\r\n * \r\n * This function will fetch the list of all events\r\n */\r\n\r\nexport const getEvents = async () => {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        return mockData;\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n        removeQuery(); \r\n        const url = \"https://do1hq8sag2.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\r\n        const response = await fetch(url);\r\n        const result = await response.json();\r\n        if (result) {\r\n            return result.events;\r\n        } else return null;\r\n    }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,QAAQ,KAAM,aAAa,CAElC;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,MAAM,CAAAC,gBAAgB,CAAIC,MAAM,EAAK,CACxC,KAAM,CAAAC,kBAAkB,CAAGD,MAAM,CAACE,GAAG,CAAEC,KAAK,EAAKA,KAAK,CAACC,QAAQ,CAAC,CAChE,KAAM,CAAAC,SAAS,CAAG,CAAC,GAAG,GAAI,CAAAC,GAAG,CAACL,kBAAkB,CAAC,CAAC,CAClD,MAAO,CAAAI,SAAS,CACpB,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,cAAc,CAAG,KAAAA,CAAA,GAAY,CACtC,KAAM,CAAAC,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CACxD;AACA,KAAM,CAAAC,UAAU,CAAGH,WAAW,GAAK,KAAM,CAAAI,UAAU,CAACJ,WAAW,CAAC,CAAC,CAEjE,GAAI,CAACA,WAAW,EAAIG,UAAU,CAACE,KAAK,CAAE,CAClC,KAAM,CAAAJ,YAAY,CAACK,UAAU,CAAC,cAAc,CAAC,CAC7C,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAC,eAAe,CAACC,MAAM,CAACb,QAAQ,CAACc,MAAM,CAAC,CAChE,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,YAAY,CAACK,GAAG,CAAC,MAAM,CAAC,CAC3C,GAAI,CAACD,IAAI,CAAE,CACP,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CACxB,6EACJ,CAAC,CACD,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CACpC,KAAM,CAAEC,OAAQ,CAAC,CAAGF,MAAM,CAC1B,MAAQ,CAAAN,MAAM,CAACb,QAAQ,CAACsB,IAAI,CAAGD,OAAO,CAC1C,CACA,MAAO,CAAAN,IAAI,EAAIZ,cAAc,CAACY,IAAI,CAAC,CACvC,CACA,MAAO,CAAAX,WAAW,CACtB,CAAC,CAED;AACA,KAAM,CAAAI,UAAU,CAAG,KAAO,CAAAJ,WAAW,EAAK,CACtC,KAAM,CAAAa,QAAQ,CAAG,KAAM,CAAAC,KAAK,gEAAAK,MAAA,CACuCnB,WAAW,CAC9E,CAAC,CACD,KAAM,CAAAe,MAAM,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CACpC,MAAO,CAAAD,MAAM,CACjB,CAAC,CAED;AACA,KAAM,CAAAK,QAAQ,CAAG,KAAO,CAAAT,IAAI,EAAK,CAC7B,KAAM,CAAAU,UAAU,CAAGC,kBAAkB,CAACX,IAAI,CAAC,CAC3C,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CACxB,sEAAsE,CAAG,GAAG,CAAGO,UACnF,CAAC,CACD,KAAM,CAAEE,YAAa,CAAC,CAAG,KAAM,CAAAV,QAAQ,CAACG,IAAI,CAAC,CAAC,CAC9CO,YAAY,EAAItB,YAAY,CAACuB,OAAO,CAAC,cAAc,CAAED,YAAY,CAAC,CAElE,MAAO,CAAAA,YAAY,CACvB,CAAC,CAED;AACA,KAAM,CAAAE,WAAW,CAAGA,CAAA,GAAM,CACtB,GAAI,CAAAC,MAAM,CACV,GAAIjB,MAAM,CAACkB,OAAO,CAACC,SAAS,EAAInB,MAAM,CAACb,QAAQ,CAACiC,QAAQ,CAAE,CACtDH,MAAM,CACNjB,MAAM,CAACb,QAAQ,CAACkC,QAAQ,CACxB,IAAI,CACJrB,MAAM,CAACb,QAAQ,CAACmC,IAAI,CACpBtB,MAAM,CAACb,QAAQ,CAACiC,QAAQ,CACxBpB,MAAM,CAACkB,OAAO,CAACC,SAAS,CAAC,EAAE,CAAE,EAAE,CAAEF,MAAM,CAAC,CAC5C,CAAC,IAAM,CACHA,MAAM,CAAGjB,MAAM,CAACb,QAAQ,CAACkC,QAAQ,CAAG,IAAI,CAAGrB,MAAM,CAACb,QAAQ,CAACmC,IAAI,CAC/DtB,MAAM,CAACkB,OAAO,CAACC,SAAS,CAAC,EAAE,CAAE,EAAE,CAAEF,MAAM,CAAC,CAC5C,CACJ,CAAC,CAED;AACA;AACA;AACA,GAEA,MAAO,MAAM,CAAAM,SAAS,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAIvB,MAAM,CAACb,QAAQ,CAACsB,IAAI,CAACe,UAAU,CAAC,kBAAkB,CAAC,CAAE,CACrD,MAAO,CAAA3C,QAAQ,CACnB,CAEA,KAAM,CAAA4C,KAAK,CAAG,KAAM,CAAAnC,cAAc,CAAC,CAAC,CAEpC,GAAImC,KAAK,CAAE,CACPT,WAAW,CAAC,CAAC,CACb,KAAM,CAAAU,GAAG,CAAG,2EAA2E,CAAG,GAAG,CAAGD,KAAK,CACrG,KAAM,CAAArB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACqB,GAAG,CAAC,CACjC,KAAM,CAAApB,MAAM,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CACpC,GAAID,MAAM,CAAE,CACR,MAAO,CAAAA,MAAM,CAACvB,MAAM,CACxB,CAAC,IAAM,OAAO,KAAI,CACtB,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}